#!/usr/bin/env python

def getPhotosFromInbox():
	"""
	fetches photos from an inbox on an IMAP server
	configure using IMAP_SERVER, IMAP_USER, IMAP_PSWD variables
	"""
	import imaplib
	import random, string
	from django.core.files.base import ContentFile
	

	imap = imaplib.IMAP4(settings.IMAP_SERVER)
	imap.login(settings.IMAP_USER,settings.IMAP_PSWD)

	imap.select()
	typ, data = imap.search(None,'ALL')	#get all messages
	#typ, data = imap.search(None,'UNSEEN')	#get only unread messages

	#process each unread message
	for num in data[0].split():
		typ, data = imap.fetch(num, '(RFC822)')
		#fetch all photos from the message and save
		sender, photos = extractPhotosFromEmail(data[0][1])
		if photos:		#update this to work with multiple photos
			#create a receipt for this upload
			receipt = ''.join([random.choice(string.letters) for i in range(16)])
			p = Photo(receipt=receipt)
			p.image.save('%s.jpg' % receipt,ContentFile(photos[0]))
			p.save()
			#notify uploader that photos are ready to view
			sendPhotoReadyEmail(sender,settings.PREVIEW_URL % receipt)
		
	imap.logout()

def extractPhotosFromEmail(message):
	"""
	extracts photos from an email message
	"""
	import email
	import random, string
	#get email and assign it to msg
	msg = email.message_from_string(message)
	sender = msg['Return-Path']
	print "processing mail from: %s" % sender
	
	photos = []
	#Step through the mime headers
	for data in msg.walk():
		#get a filename from the header and assign it to name
		name = data.get_filename() 
		#if name ends with .jpg extract the data and write write it to file.
		if name and name.endswith('.jpg'):
			#give the photo file a random name
			name = ''.join([random.choice(string.letters) for i in range(32)]) + '.jpg'
			#get the photo data
			photos.append( data.get_payload(decode = 1) )
	
	#return the senders name and list of photos
	return sender, photos

def sendPhotoReadyEmail(recipients,url):
	"""
	sends email to recipient with a link to a page to review photos
	"""
	from django.core.mail import EmailMultiAlternatives
	from django.template import loader, Context
	
	template_name = 'email'
	subject = 'best email ever'
	sender = 'upload@wilperkins.com'
	
	if sender:
		#sender = settings.DEFAULT_FROM_EMAIL
		context = Context({
			'username' : 'dude',
			'url' : url,
		})
		
		text_part = loader.get_template('email.txt').render(context)
		html_part = loader.get_template('email.html').render(context)
		subject_part = loader.get_template_from_string(subject).render(context)
		
		if type(recipients) != list:
			recipients = [recipients,]
			
			msg = EmailMultiAlternatives(subject_part, text_part, sender, recipients)
			msg.attach_alternative(html_part, "text/html")
			return msg.send(False)

if __name__ == '__main__':
	import sys,os
	import os.path
	
	if 'pickup' not in sys.argv:
		print 'usage: utils.py pickup'
		sys.exit(2)
	
	#setup the environment
	basedir = os.path.dirname(os.path.realpath(__file__)).rstrip('/PhotoUpload/core')
	sys.path.append(basedir)	
	os.environ['DJANGO_SETTINGS_MODULE'] ='PhotoUpload.settings'
	
	from django.conf import settings
	from PhotoUpload.core.models import Photo
	
	#do the work here
	getPhotosFromInbox()
